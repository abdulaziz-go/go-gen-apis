package router

import (
	"errors"
	"github.com/abdulaziz-go/go-gen-apis/config"
	"github.com/abdulaziz-go/go-gen-apis/handler"
	"github.com/abdulaziz-go/go-gen-apis/repository"
	"github.com/abdulaziz-go/go-gen-apis/repository/db"
	"github.com/abdulaziz-go/go-gen-apis/service"
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

func SetUpAutoGeneratedApis(cfg *config.GenApiConfig, ginEngine *gin.RouterGroup) error {
	if cfg == nil {
		logrus.Error("cfg is nil")
		return errors.New("gen api cfg is nil")
	}

	database, err := db.NewConnection(cfg)
	if err != nil {
		logrus.Errorf("failed to connecting postgres %v", err)
		return err
	}

	repo := repository.NewItemRepository(database)
	itemService := service.NewItemService(repo)
	itemHandler := handler.NewItemHandler(itemService)
	setupItemRoutes(ginEngine, itemHandler)
	return nil
}

func setupItemRoutes(engine *gin.RouterGroup, itemHandler handler.ItemHandler) {
	itemsGroup := engine.Group("/items")
	{
		itemsGroup.POST("/:table_name", itemHandler.CreateItem)
		itemsGroup.GET("/:table_name", itemHandler.GetItems)
		itemsGroup.GET("/:table_name/:id", itemHandler.GetItemByID)
		itemsGroup.PUT("/:table_name/:id", itemHandler.UpdateItem)
		itemsGroup.DELETE("/:table_name/:id", itemHandler.DeleteItem)
	}

	logrus.Info("item routes configured successfully")
}

//func main() {
//	appEngine := gin.Default()
//	SetUpAutoGeneratedApis(&config.GenApiConfig{
//		PostgresUrl:      "localhost",
//		PostgresUser:     "postgres",
//		PostgresPassword: "secretpassword",
//		PostgresDB:       "postgres",
//		Port:             "5432",
//	}, appEngine.Group(""))
//	appEngine.Run()
//}
